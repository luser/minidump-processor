#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

use num_derive::FromPrimitive;

pub use super::windows_gen::*;

/// Values for
/// [`MINIDUMP_EXCEPTION::exception_code`](crate::format::MINIDUMP_EXCEPTION::exception_code)
/// for crashes on Windows.
///
/// These values come from WinBase.h and WinNT.h with a few additions.
#[repr(u32)]
#[derive(Copy, Clone, PartialEq, Eq, Debug, FromPrimitive)]
pub enum ExceptionCodeWindows {
    EXCEPTION_GUARD_PAGE = 0x80000001u32,
    EXCEPTION_DATATYPE_MISALIGNMENT = 0x80000002,
    EXCEPTION_BREAKPOINT = 0x80000003,
    EXCEPTION_SINGLE_STEP = 0x80000004,
    EXCEPTION_ACCESS_VIOLATION = 0xc0000005,
    EXCEPTION_IN_PAGE_ERROR = 0xc0000006,
    EXCEPTION_INVALID_HANDLE = 0xc0000008,
    EXCEPTION_ILLEGAL_INSTRUCTION = 0xc000001d,
    EXCEPTION_NONCONTINUABLE_EXCEPTION = 0xc0000025,
    EXCEPTION_INVALID_DISPOSITION = 0xc0000026,
    EXCEPTION_BOUNDS_EXCEEDED = 0xc000008c,
    EXCEPTION_FLT_DENORMAL_OPERAND = 0xc000008d,
    EXCEPTION_FLT_DIVIDE_BY_ZERO = 0xc000008e,
    EXCEPTION_FLT_INEXACT_RESULT = 0xc000008f,
    EXCEPTION_FLT_INVALID_OPERATION = 0xc0000090,
    EXCEPTION_FLT_OVERFLOW = 0xc0000091,
    EXCEPTION_FLT_STACK_CHECK = 0xc0000092,
    EXCEPTION_FLT_UNDERFLOW = 0xc0000093,
    EXCEPTION_INT_DIVIDE_BY_ZERO = 0xc0000094,
    EXCEPTION_INT_OVERFLOW = 0xc0000095,
    EXCEPTION_PRIV_INSTRUCTION = 0xc0000096,
    EXCEPTION_STACK_OVERFLOW = 0xc00000fd,
    EXCEPTION_POSSIBLE_DEADLOCK = 0xc0000194,
    /// Exception thrown by Chromium allocators to indicate OOM
    ///
    /// See base/process/memory.h in Chromium for rationale.
    OUT_OF_MEMORY = 0xe0000008,
    /// Per <http://support.microsoft.com/kb/185294>, generated by Visual C++ compiler
    UNHANDLED_CPP_EXCEPTION = 0xe06d7363,
    // Per <https://learn.microsoft.com/en-us/shows/inside/e0434352>, 'CCR', exception thrown from managed code
    MANAGED_EXCEPTION_CODE_V4 = 0xe0434352,
    /// Fake exception code used by Crashpad
    SIMULATED = 0x0517a7ed,
}

/// The values can be generated from from winerror.h in the Windows 11 SDK
/// (version 10.0.22621.0) using the following script:
/// ```sh
/// egrep -o '#define FACILITY_[A-Z_0-9]+\s+[0-9]+' winerror.h | tr -d '\r' \
///   | sed -r 's@#define (FACILITY_[A-Z_0-9]+)\s+([0-9]+)@\2 \1@' \
///   | sed -r 's@([0-9]+) ([A-Z_0-9]+)@    \2 = \L\1,@'
/// ```
/// For the time being we only retain the ones we actually encounter in the wide.
#[repr(u32)]
#[derive(Copy, Clone, PartialEq, Eq, Debug, FromPrimitive)]
pub enum WinErrorFacilityWindows {
    FACILITY_VISUALCPP = 109,
}

/// Values for [`MINIDUMP_EXCEPTION::exception_information[0]`](crate::format::MINIDUMP_EXCEPTION::exception_information),
/// when [`MINIDUMP_EXCEPTION::exception_code`](crate::format::MINIDUMP_EXCEPTION::exception_code) is
/// [`NtStatusWindows::STATUS_STACK_BUFFER_OVERRUN`].
///
/// This describes the underlying reason for the crash.
///
/// The values were generated from from winnt.h in the Windows 11 SDK
/// (version 10.0.22621.0) using the following script:
/// ```sh
/// egrep '#define FAST_FAIL_[A-Z_0-9]+\s+[0-9]' winnt.h \
/// | tr -d '\r' \
/// | sed -r 's@#define (FAST_FAIL_[A-Z_0-9]+)\s+([0-9]+).*@\2 \1@' \
/// | sed -r 's@([0-9]+) ([A-Z_0-9]+)@    \2 = \1,@'
/// ```
#[repr(u64)]
#[derive(Copy, Clone, PartialEq, Eq, Debug, FromPrimitive)]
pub enum FastFailCode {
    FAST_FAIL_LEGACY_GS_VIOLATION = 0,
    FAST_FAIL_VTGUARD_CHECK_FAILURE = 1,
    FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2,
    FAST_FAIL_CORRUPT_LIST_ENTRY = 3,
    FAST_FAIL_INCORRECT_STACK = 4,
    FAST_FAIL_INVALID_ARG = 5,
    FAST_FAIL_GS_COOKIE_INIT = 6,
    FAST_FAIL_FATAL_APP_EXIT = 7,
    FAST_FAIL_RANGE_CHECK_FAILURE = 8,
    FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9,
    FAST_FAIL_GUARD_ICALL_CHECK_FAILURE = 10,
    FAST_FAIL_GUARD_WRITE_CHECK_FAILURE = 11,
    FAST_FAIL_INVALID_FIBER_SWITCH = 12,
    FAST_FAIL_INVALID_SET_OF_CONTEXT = 13,
    FAST_FAIL_INVALID_REFERENCE_COUNT = 14,
    FAST_FAIL_INVALID_JUMP_BUFFER = 18,
    FAST_FAIL_MRDATA_MODIFIED = 19,
    FAST_FAIL_CERTIFICATION_FAILURE = 20,
    FAST_FAIL_INVALID_EXCEPTION_CHAIN = 21,
    FAST_FAIL_CRYPTO_LIBRARY = 22,
    FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT = 23,
    FAST_FAIL_INVALID_IMAGE_BASE = 24,
    FAST_FAIL_DLOAD_PROTECTION_FAILURE = 25,
    FAST_FAIL_UNSAFE_EXTENSION_CALL = 26,
    FAST_FAIL_DEPRECATED_SERVICE_INVOKED = 27,
    FAST_FAIL_INVALID_BUFFER_ACCESS = 28,
    FAST_FAIL_INVALID_BALANCED_TREE = 29,
    FAST_FAIL_INVALID_NEXT_THREAD = 30,
    FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED = 31,
    FAST_FAIL_APCS_DISABLED = 32,
    FAST_FAIL_INVALID_IDLE_STATE = 33,
    FAST_FAIL_MRDATA_PROTECTION_FAILURE = 34,
    FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION = 35,
    FAST_FAIL_INVALID_LOCK_STATE = 36,
    FAST_FAIL_GUARD_JUMPTABLE = 37,
    FAST_FAIL_INVALID_LONGJUMP_TARGET = 38,
    FAST_FAIL_INVALID_DISPATCH_CONTEXT = 39,
    FAST_FAIL_INVALID_THREAD = 40,
    FAST_FAIL_INVALID_SYSCALL_NUMBER = 41,
    FAST_FAIL_INVALID_FILE_OPERATION = 42,
    FAST_FAIL_LPAC_ACCESS_DENIED = 43,
    FAST_FAIL_GUARD_SS_FAILURE = 44,
    FAST_FAIL_LOADER_CONTINUITY_FAILURE = 45,
    FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE = 46,
    FAST_FAIL_INVALID_CONTROL_STACK = 47,
    FAST_FAIL_SET_CONTEXT_DENIED = 48,
    FAST_FAIL_INVALID_IAT = 49,
    FAST_FAIL_HEAP_METADATA_CORRUPTION = 50,
    FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION = 51,
    FAST_FAIL_LOW_LABEL_ACCESS_DENIED = 52,
    FAST_FAIL_ENCLAVE_CALL_FAILURE = 53,
    FAST_FAIL_UNHANDLED_LSS_EXCEPTON = 54,
    FAST_FAIL_ADMINLESS_ACCESS_DENIED = 55,
    FAST_FAIL_UNEXPECTED_CALL = 56,
    FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS = 57,
    FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR = 58,
    FAST_FAIL_FLAGS_CORRUPTION = 59,
    FAST_FAIL_VEH_CORRUPTION = 60,
    FAST_FAIL_ETW_CORRUPTION = 61,
    FAST_FAIL_RIO_ABORT = 62,
    FAST_FAIL_INVALID_PFN = 63,
    FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG = 64,
    FAST_FAIL_CAST_GUARD = 65,
    FAST_FAIL_HOST_VISIBILITY_CHANGE = 66,
    FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST = 67,
    FAST_FAIL_PATCH_CALLBACK_FAILED = 68,
    FAST_FAIL_NTDLL_PATCH_FAILED = 69,
    FAST_FAIL_INVALID_FLS_DATA = 70,
}

/// The different kinds of EXCEPTION_ACCESS_VIOLATION.
///
/// These constants are defined in the [MSDN documentation][msdn] of
/// the EXCEPTION_RECORD structure.
///
/// [msdn]: https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_record
#[repr(u64)]
#[derive(Copy, Clone, PartialEq, Eq, Debug, FromPrimitive)]
pub enum ExceptionCodeWindowsAccessType {
    READ = 0,
    WRITE = 1,
    EXEC = 8,
}

/// The different kinds of EXCEPTION_IN_PAGE_ERROR.
///
/// These constants are defined in the [MSDN documentation][msdn] of
/// the EXCEPTION_RECORD structure.
///
/// [msdn]: https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_record
#[repr(u64)]
#[derive(Copy, Clone, PartialEq, Eq, Debug, FromPrimitive)]
pub enum ExceptionCodeWindowsInPageErrorType {
    READ = 0,
    WRITE = 1,
    EXEC = 8,
}
